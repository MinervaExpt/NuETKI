//Usage: root -l -b -q 'SumHistogramsFromFiles.C("mcHistNames.txt", "mc_sum.root")'

//Minerva includes
//#include "PlotUtils/MnvH1D.h"
//#include "event/CVUniverse.h"
//#include "util/Variable.h"
//#include "util/SafeROOTName.h"
//#include "util/Categorized.h"
//#include "PlotUtils/HistWrapper.h"
#include "PlotUtils/VariableBase.h"
//#include "PlotUtils/Hist2DWrapper.h"


#include <TFile.h>
#include <TH1.h>
#include <TKey.h>
#include <TClass.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <map>

void SumHistogramsFromFiles(const char* filelistPath = "filelist.txt", const char* outputPath = "summedOutput.root") {
  std::vector<std::string> inputFiles;
  std::ifstream infile(filelistPath);
  std::string line;

  // Read input file paths
  while (std::getline(infile, line)) {
    if (!line.empty()) inputFiles.push_back(line);
  }

  if (inputFiles.empty()) {
    std::cerr << "Error: No input files found in " << filelistPath << std::endl;
    return;
  }

  std::cout << "Found " << inputFiles.size() << " files to process.\n";

  // Open first file to get list of histogram names
  TFile* firstFile = TFile::Open(inputFiles[0].c_str());
  if (!firstFile || firstFile->IsZombie()) {
    std::cerr << "Error opening file: " << inputFiles[0] << std::endl;
    return;
  }

  std::vector<std::string> histNames;
  TIter next(firstFile->GetListOfKeys());
  TKey* key;
  while ((key = (TKey*)next())) {
    TObject* obj = key->ReadObj();
    if (obj->InheritsFrom(TH1::Class())) {
      histNames.push_back(key->GetName());
      //std::cout << "key name: " << key->GetName() << ", obj name: " << obj->GetName() << ", type: (" << key->GetClassName() << ")" << std::endl;
    }
    delete obj;
  }
  firstFile->Close();
  std::cout << histNames.size() << " Histograms found: " << std::endl;
  for (const auto& name : histNames) std::cout << name << std::endl;
  std::cout << std::endl;

  // Map to hold summed histograms
  std::map<std::string, TH1*> summedHists;

  // Loop through each file
  for (const auto& filepath : inputFiles) {
    TFile* file = TFile::Open(filepath.c_str());
    std::cout << "- FILE - " << filepath << std::endl;
    
    if (!file || file->IsZombie()) {
      std::cerr << "Warning: Skipping file " << filepath << std::endl;
      continue;
    }

    for (const auto& name : histNames) {
      //TH1* hist = dynamic_cast<TH1*>(file->Get(name.c_str()));
      TH1* hist = nullptr;
      file->GetObject(name.c_str(), hist);
      std::cout << "hist: " << name << ", # entries: " << hist->GetEntries() << std::endl;
      
      if (!hist) {
	std::cerr << "Warning: Histogram " << name << " not found in file " << filepath << std::endl;
	continue;
      }      
      if (summedHists.find(name) == summedHists.end()) {
	TH1* newHist = nullptr;

	if (hist->InheritsFrom(TH2::Class())) {
	  newHist = new TH2D(name.c_str(), hist->GetTitle(),
			     hist->GetNbinsX(),
			     hist->GetXaxis()->GetXmin(),
			     hist->GetXaxis()->GetXmax(),
			     hist->GetNbinsY(),
			     hist->GetYaxis()->GetXmin(),
			     hist->GetYaxis()->GetXmax());
	} else if (hist->InheritsFrom(TH1::Class())){
	  newHist = new TH1D(name.c_str(), hist->GetTitle(),
			     hist->GetNbinsX(),
			     hist->GetXaxis()->GetXmin(),
			     hist->GetXaxis()->GetXmax());
	} else {
	  std::cout << "not a 1D or 2D... " << std::endl;
	}
	newHist->SetDirectory(nullptr);  // Detach from file to avoid memory issues
	newHist->Add(hist);              // Copy contents
	summedHists[name] = newHist;

	//TH1* clone = dynamic_cast<TH1*>(hist->Clone());
	//clone->SetDirectory(nullptr);
	//summedHists[name] = clone;
	//delete hist;  // Now safe, since GetObject didn't register it
      } else {
        summedHists[name]->Add(hist);
      }
      //delete hist;
    }
    file->Close();
  }

  // Write summed histograms to output file
  TFile* outFile = TFile::Open(outputPath, "RECREATE");
  for (const auto& entry : summedHists) {
    entry.second->Write();
  }
  outFile->Close();
  //for (auto& pair : summedHists) {
  //delete pair.second;
  //}

  std::cout << "Summed histograms written to: " << outputPath << std::endl;
}
